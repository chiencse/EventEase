name: ðŸš€ Deploy + Release NestJS App
 
on:
   push:
     branches: [main]
   workflow_dispatch:
 
env:
   IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/sample_app
permissions:
     contents: write
jobs:
   test:
     name: Run Tests
     runs-on: ubuntu-latest
 
     steps:
       - uses: actions/checkout@v3
         with:
           fetch-depth: 0  
 
       - uses: actions/setup-node@v3
         with:
           node-version: 20
 
       - run: npm install
       - run: npm run test
 
   build:
     name: Build Docker Image
     runs-on: ubuntu-latest
     needs: test
 
     steps:
       - uses: actions/checkout@v3
         with:
           fetch-depth: 0
 
       - uses: actions/setup-node@v3
         with:
           node-version: 20
 
       - name: Login to GHCR
         run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
 
       - run: docker build -t $IMAGE_NAME:latest .
       - run: docker push $IMAGE_NAME:latest
   deploy:
     name: Deploy to EC2
     runs-on: ubuntu-latest
     needs: build
 
     steps:
       - name: Checkout code
         uses: actions/checkout@v3
 
       - name: Create local .env file
         run: echo "${{ secrets.ENV_FILE }}" > .env
 
       - name: Copy files to EC2
         uses: appleboy/scp-action@v0.1.7
         with:
           host: ${{ secrets.EC2_HOST }}
           username: ${{ secrets.EC2_USER }}
           key: ${{ secrets.EC2_SSH_KEY }}
           source: '.env,docker-compose-staging.yml'
           target: /home/${{ secrets.EC2_USER }}/nestjs-deploy
 
       - name: SSH and Deploy
         uses: appleboy/ssh-action@v1.0.0
         with:
           host: ${{ secrets.EC2_HOST }}
           username: ${{ secrets.EC2_USER }}
           key: ${{ secrets.EC2_SSH_KEY }}
           envs: GHCR_TOKEN,GHCR_USERNAME,IMAGE_NAME
           script: |
             cd /home/${{ secrets.EC2_USER }}/nestjs-deploy
             echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
 
             docker compose -f docker-compose-staging.yml down
             docker rmi $IMAGE_NAME:latest || true
             docker compose -f docker-compose-staging.yml pull
             docker compose -f docker-compose-staging.yml up -d
         env:
           GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
           GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
           IMAGE_NAME: ${{ env.IMAGE_NAME }}
           
   release:
     name: Bump Version & Create Git Tag
     runs-on: ubuntu-latest
     needs: deploy
 
     steps:
       - uses: actions/checkout@v3
         with:
           fetch-depth: 0
 
       - uses: actions/setup-node@v3
         with:
           node-version: 20
 
       - run: npm install
 
       - name: Set up Git user
         run: |
           git config --global user.name "GitHub Actions"
           git config --global user.email "actions@github.com"
 
       - name: Bump version using standard-version
         run: npm run release
 
       - name: Push bump commit + tags
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         run: |
           git push origin HEAD:main
           git push origin --tags
       - name: Extract version from package.json
         id: extract_version
         run: echo "::set-output name=VERSION::$(node -p -e \"require('./package.json').version\")"
 
   create-release:
     name: Create GitHub Release
     runs-on: ubuntu-latest
     needs: release
 
     steps:
       - uses: actions/checkout@v3
         with:
           fetch-depth: 0
 
       - name: Create GitHub Release
         uses: softprops/action-gh-release@v1
         with:
           tag_name: v${{ steps.extract_version.outputs.VERSION }}
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
       - name: Extract Version
         id: extract_version
         run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
 
   update-readme-badge:
     name: Update Version Badge
     runs-on: ubuntu-latest
     needs: create-release
 
     steps:
       - uses: actions/checkout@v3
 
       - name: Update README badge
         run: |
           VERSION=$(node -p -e "require('./package.json').version")
           sed -i 's|\(https://img.shields.io/badge/version-\).*\(-blue\)|\1'"$VERSION"'\2|' README.md
           git config --global user.name "GitHub Actions"
           git config --global user.email "actions@github.com"
           git add README.md || true
           git diff --cached --quiet || (git commit -m "docs: update version badge to $VERSION" && git push)
